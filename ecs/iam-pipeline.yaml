---
AWSTemplateFormatVersion: '2010-09-09'
Description: MU IAM roles and keys for pipeline
Parameters:
  Namespace:
    Type: String
    Description: Namespace for stack prefixes
  ServiceName:
    Type: String
    Description: Name of service used for resource namespace
  SourceProvider:
    Type: String
    Description: Provider for source repo
    Default: "CodeCommit"
    AllowedValues:
    - GitHub
    - CodeCommit
    - S3
  SourceRepo:
    Type: String
    Description: Provider specific repository
  SourceBucket:
    Type: String
    Description: Source Bucket
    Default: ""
  SourceObjectKey:
    Type: String
    Description: Source Object Key
    Default: ""
  AcptEnv:
    Type: String
    Description: Name of mu environment to deploy to for testing
    Default: "acceptance"
  ProdEnv:
    Type: String
    Description: Name of mu environment to deploy to for production
    Default: "production"
  AcptCloudFormationRoleArn:
    Type: String
    Description: Name of role to pass to CloudFormation in ACPT
    Default: ""
  ProdCloudFormationRoleArn:
    Type: String
    Description: Name of role to pass to CloudFormation in PROD
    Default: ""
  EnableBuildStage:
    Type: String
    Description: Enable build stage
    Default: "true"
    AllowedValues:
      - "true"
      - "false"
  EnableAcptStage:
    Type: String
    Description: Enable acceptance stage
    Default: "true"
    AllowedValues:
      - "true"
      - "false"
  EnableProdStage:
    Type: String
    Description: Enable prod stage
    Default: "true"
    AllowedValues:
      - "true"
      - "false"
Conditions:
  IsS3:
    "Fn::And":
    - "Fn::Equals":
        - !Ref SourceProvider
        - 'S3'
    - "Fn::Not":
      - "Fn::Equals":
        - ""
        - !Ref SourceBucket
    - "Fn::Not":
      - "Fn::Equals":
        - ""
        - !Ref SourceObjectKey
  IsCodeCommit:
    "Fn::Equals":
      - !Ref SourceProvider
      - 'CodeCommit'
  IsBuildEnabled:
    "Fn::Equals":
      - !Ref EnableBuildStage
      - 'true'
  IsAcptEnabled:
    "Fn::Equals":
      - !Ref EnableAcptStage
      - 'true'
  IsProdEnabled:
    "Fn::Equals":
      - !Ref EnableProdStage
      - 'true'
  HasSourceBucket:
    "Fn::Not":
      - "Fn::Equals":
        - ""
        - !Ref SourceBucket
  HasSourceObjectKey:
    "Fn::Not":
      - "Fn::Equals":
        - ""
        - !Ref SourceObjectKey
Resources:
  Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub ${Namespace}-${ServiceName}-${AWS::Region}-${AWS::AccountId}

  BucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref Bucket
      PolicyDocument:
        Version: '2012-10-17'
        Id: SSEAndSSLPolicy
        Statement:
        - Sid: DenyInsecureConnections
          Effect: Deny
          Principal: '*'
          Action: s3:*
          Resource: !Sub arn:${AWS::Partition}:s3:::${Bucket}/*
          Condition:
            Bool:
              aws:SecureTransport": false

  CodePipelineKey:
    Type: AWS::KMS::Key
    Properties:
      Description: !Sub Pipeline key for ${Namespace}-pipeline-${ServiceName}
      Enabled: true
      EnableKeyRotation: false
      KeyPolicy:
        Version: '2012-10-17'
        Statement:
          - Effect: "Allow"
            Principal:
              AWS:
              - !Sub arn:${AWS::Partition}:iam::${AWS::AccountId}:root
            Action:
              - 'kms:*'
            Resource: '*'
          - Effect: "Allow"
            Principal:
              AWS: '*'
            Action:
              - kms:GenerateDataKey
              - kms:GenerateDataKeyWithoutPlaintext
              - kms:Encrypt
              - kms:ReEncryptFrom
              - kms:ReEncryptTo
              - kms:Decrypt
            Resource: '*'
            Condition:
              StringEquals:
                'kms:ViaService': !Sub "s3.${AWS::Region}.amazonaws.com"
                'kms:CallerAccount': !Sub ${AWS::AccountId}
          - Effect: "Allow"
            Principal:
              AWS:
              - !GetAtt CodePipelineRole.Arn
              - !GetAtt CodeBuildCIRole.Arn
              - Fn::If:
                - IsAcptEnabled
                - !GetAtt CodeBuildCDAcptRole.Arn
                - !Ref AWS::NoValue
              - Fn::If:
                - IsAcptEnabled
                - !GetAtt MuAcptRole.Arn
                - !Ref AWS::NoValue
              - Fn::If:
                - IsProdEnabled
                - !GetAtt CodeBuildCDProdRole.Arn
                - !Ref AWS::NoValue
              - Fn::If:
                - IsProdEnabled
                - !GetAtt MuProdRole.Arn
                - !Ref AWS::NoValue
            Action:
              - kms:GenerateDataKey
              - kms:GenerateDataKeyWithoutPlaintext
              - kms:Encrypt
              - kms:ReEncryptFrom
              - kms:ReEncryptTo
              - kms:Decrypt
            Resource: '*'
            Condition:
              StringEquals:
                'kms:ViaService': !Sub "s3.${AWS::Region}.amazonaws.com"
                'kms:CallerAccount': !Sub ${AWS::AccountId}
          - Effect: "Deny"
            Principal: '*'
            Action:
              - 'kms:CreateGrant'
              - 'kms:ListGrants'
              - 'kms:RevokeGrant'
            Resource: '*'
            Condition:
              Bool:
                kms:GrantIsForAWSResource: false
  CodePipelineKeyAlias:
    Type: AWS::KMS::Alias
    Properties:
      AliasName: !Sub alias/${Namespace}-pipeline-${ServiceName}
      TargetKeyId: !Ref CodePipelineKey
  CodePipelineRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${Namespace}-pipeline-${ServiceName}-codepipeline-${AWS::Region}
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - codepipeline.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/"
      Policies:
      - PolicyName: codepipeline-service
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Action:
            - codebuild:StartBuild
            - codebuild:StopBuild
            - codebuild:BatchGetProjects
            - codebuild:BatchGetBuilds
            Effect: Allow
            Resource:
            - !Sub arn:${AWS::Partition}:codebuild:${AWS::Region}:${AWS::AccountId}:project/${Namespace}-pipeline-${ServiceName}-*
          - Fn::If:
            - IsCodeCommit
            - Action:
              - codecommit:GetBranch
              - codecommit:GetCommit
              - codecommit:UploadArchive
              - codecommit:GetUploadArchiveStatus
              - codecommit:CancelUploadArchive
              Resource: !Sub arn:${AWS::Partition}:codecommit:${AWS::Region}:${AWS::AccountId}:${SourceRepo}
              Effect: Allow
            - !Ref AWS::NoValue
          - Fn::If:
            - IsS3
            - Action:
              - s3:GetObject
              - s3:GetObjectVersion
              Effect: Allow
              Resource:
              - Fn::Sub: arn:${AWS::Partition}:s3:::${SourceRepo}
            - !Ref AWS::NoValue
          - Fn::If:
            - IsS3
            - Action:
              - s3:GetObject
              - s3:GetObjectVersion
              Effect: Allow
              Resource:
              - Fn::Sub: arn:${AWS::Partition}:s3:::${SourceBucket}/${SourceObjectKey}
            - !Ref AWS::NoValue
          - Fn::If:
            - IsS3
            - Action:
              - s3:GetBucketVersioning
              Effect: Allow
              Resource:
              - Fn::Sub: arn:${AWS::Partition}:s3:::${SourceBucket}
            - !Ref AWS::NoValue
          - Action:
            - s3:GetObject
            - s3:GetObjectVersion
            - s3:PutObject
            Resource:
            - Fn::Sub: arn:${AWS::Partition}:s3:::${Bucket}/*
            Effect: Allow
          - Action:
            - s3:GetBucketVersioning
            Resource:
            - Fn::Sub: arn:${AWS::Partition}:s3:::${Bucket}
            Effect: Allow
          - Action:
            - sns:Publish
            Effect: Allow
            Resource:
            - Fn::Sub: arn:${AWS::Partition}:sns:${AWS::Region}:${AWS::AccountId}:${Namespace}-pipeline-${ServiceName}-*
          - Action:
            - iam:PassRole
            Resource:
            - !GetAtt CodeBuildCIRole.Arn
            - Fn::If:
              - IsAcptEnabled
              - !GetAtt CodeBuildCDAcptRole.Arn
              - !Ref AWS::NoValue
            - Fn::If:
              - IsProdEnabled
              - !GetAtt CodeBuildCDProdRole.Arn
              - !Ref AWS::NoValue
            Effect: Allow

  CodePipelineAccessPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: codepipeline-access
      Roles:
      - !Ref CodeBuildCIRole
      - Fn::If:
        - IsAcptEnabled
        - !Ref CodeBuildCDAcptRole
        - !Ref AWS::NoValue
      - Fn::If:
        - IsProdEnabled
        - !Ref CodeBuildCDProdRole
        - !Ref AWS::NoValue
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Action:
          - codepipeline:GetPipelineState
          - codepipeline:GetPipeline
          Effect: Allow
          Resource: !Sub arn:${AWS::Partition}:codepipeline:${AWS::Region}:${AWS::AccountId}:${Namespace}-${ServiceName}
        - Action:
          - codepipeline:GetJobDetails
          - codepipeline:PollForJobs
          - codepipeline:AcknowledgeJob
          - codepipeline:PutJobFailureResult
          - codepipeline:PutJobSuccessResult
          Effect: Allow
          Resource: '*'
        - Action:
          - logs:CreateLogGroup
          - logs:CreateLogStream
          - logs:PutLogEvents
          Effect: Allow
          Resource: '*'
        - Action:
          - s3:GetObject
          - s3:GetObjectVersion
          - s3:PutObject
          Resource:
          - Fn::Sub: arn:${AWS::Partition}:s3:::${Bucket}/*
          Effect: Allow
        - Action:
          - s3:GetBucketVersioning
          Resource:
          - Fn::Sub: arn:${AWS::Partition}:s3:::${Bucket}
          Effect: Allow

  CodeBuildCIRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${Namespace}-pipeline-${ServiceName}-ci-${AWS::Region}
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - codebuild.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/"
      Policies:
      - PolicyName: push-image
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Action:
            - cloudformation:CreateStack
            - cloudformation:UpdateStack
            - cloudformation:DescribeStackEvents
            - cloudformation:SetStackPolicy
            Resource:
            - !Sub arn:${AWS::Partition}:cloudformation:${AWS::Region}:${AWS::AccountId}:stack/${Namespace}-repo-${ServiceName}/*
            - !Sub arn:${AWS::Partition}:cloudformation:${AWS::Region}:${AWS::AccountId}:stack/${Namespace}-app-${ServiceName}/*
            - !Sub arn:${AWS::Partition}:cloudformation:${AWS::Region}:${AWS::AccountId}:stack/${Namespace}-bucket-codedeploy/*
            Effect: Allow
          - Action:
            - cloudformation:DescribeStacks
            Resource: '*'
            Effect: Allow
          - Action:
            - s3:CreateBucket
            Resource: !Sub arn:${AWS::Partition}:s3:::${Namespace}-codedeploy-${AWS::Region}-${AWS::AccountId}
            Effect: Allow
          - Action:
            - ecr:SetRepositoryPolicy
            - ecr:BatchCheckLayerAvailability
            - ecr:GetDownloadUrlForLayer
            - ecr:GetRepositoryPolicy
            - ecr:DescribeRepositories
            - ecr:ListImages
            - ecr:DescribeImages
            - ecr:BatchGetImage
            - ecr:InitiateLayerUpload
            - ecr:UploadLayerPart
            - ecr:CompleteLayerUpload
            - ecr:PutImage
            Effect: Allow
            Resource: !Sub arn:${AWS::Partition}:ecr:${AWS::Region}:${AWS::AccountId}:repository/${SourceRepo}
          - Action:
            - ecr:GetAuthorizationToken
            Effect: Allow
            Resource: '*'
          - Action:
            - codedeploy:CreateApplication
            Effect: Allow
            Resource: !Sub arn:${AWS::Partition}:codedeploy:${AWS::Region}:${AWS::AccountId}:application:${Namespace}-app-${ServiceName}
          - Action:
            - s3:GetObject
            - s3:GetObjectVersion
            - s3:PutObject
            Resource:
            - !Sub arn:${AWS::Partition}:s3:::${Namespace}-codedeploy-${AWS::Region}-${AWS::AccountId}/*
            Effect: Allow


  CodeBuildCDAcptRole:
    Type: AWS::IAM::Role
    Condition: IsAcptEnabled
    Properties:
      RoleName: !Sub ${Namespace}-pipeline-${ServiceName}-cd-acpt-${AWS::Region}
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - codebuild.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/"
      Policies:
      - PolicyName: assume-mu-acpt
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Action:
            - sts:AssumeRole
            Resource:
            - !Sub arn:${AWS::Partition}:iam::${AWS::AccountId}:role/${Namespace}-pipeline-${ServiceName}-mu-acpt-${AWS::Region}
            Effect: Allow

  CodeBuildCDProdRole:
    Type: AWS::IAM::Role
    Condition: IsProdEnabled
    Properties:
      RoleName: !Sub ${Namespace}-pipeline-${ServiceName}-cd-prod-${AWS::Region}
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - codebuild.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/"
      Policies:
      - PolicyName: assume-mu-prod
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Action:
            - sts:AssumeRole
            Resource:
            - !Sub arn:${AWS::Partition}:iam::${AWS::AccountId}:role/${Namespace}-pipeline-${ServiceName}-mu-prod-${AWS::Region}
            Effect: Allow

  MuAcptRole:
    Type: AWS::IAM::Role
    Condition: IsAcptEnabled
    Properties:
      RoleName: !Sub ${Namespace}-pipeline-${ServiceName}-mu-acpt-${AWS::Region}
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            AWS: !GetAtt CodeBuildCDAcptRole.Arn
          Action:
          - sts:AssumeRole
      Path: "/"
      Policies:
      - PolicyName: deploy-acpt-env
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Action:
            - cloudformation:CreateStack
            - cloudformation:UpdateStack
            - cloudformation:DeleteStack
            - cloudformation:DescribeStackEvents
            - cloudformation:SetStackPolicy
            Resource:
            - !Sub arn:${AWS::Partition}:cloudformation:${AWS::Region}:${AWS::AccountId}:stack/${Namespace}-vpc-${AcptEnv}/*
            - !Sub arn:${AWS::Partition}:cloudformation:${AWS::Region}:${AWS::AccountId}:stack/${Namespace}-target-${AcptEnv}/*
            - !Sub arn:${AWS::Partition}:cloudformation:${AWS::Region}:${AWS::AccountId}:stack/${Namespace}-environment-${AcptEnv}/*
            - !Sub arn:${AWS::Partition}:cloudformation:${AWS::Region}:${AWS::AccountId}:stack/${Namespace}-loadbalancer-${AcptEnv}/*
            - !Sub arn:${AWS::Partition}:cloudformation:${AWS::Region}:${AWS::AccountId}:stack/${Namespace}-service-${ServiceName}-${AcptEnv}/*
            - !Sub arn:${AWS::Partition}:cloudformation:${AWS::Region}:${AWS::AccountId}:stack/${Namespace}-schedule-${ServiceName}-*-${AcptEnv}/*
            - !Sub arn:${AWS::Partition}:cloudformation:${AWS::Region}:${AWS::AccountId}:stack/${Namespace}-database-${ServiceName}-${AcptEnv}/*
            Effect: Allow
          - Action:
            - cloudformation:DescribeStacks
            Resource: '*'
            Effect: Allow
          - Action:
            - cloudformation:CreateStack
            - cloudformation:UpdateStack
            - cloudformation:DescribeStackEvents
            - cloudformation:SetStackPolicy
            Resource:
            - !Sub arn:${AWS::Partition}:cloudformation:${AWS::Region}:${AWS::AccountId}:stack/${Namespace}-repo-${ServiceName}/*
            - !Sub arn:${AWS::Partition}:cloudformation:${AWS::Region}:${AWS::AccountId}:stack/${Namespace}-app-${ServiceName}/*
            - !Sub arn:${AWS::Partition}:cloudformation:${AWS::Region}:${AWS::AccountId}:stack/${Namespace}-bucket-codedeploy/*
            Effect: Allow
          ### TODO: remove this once we can pass IAM role to CFN for creating an EKS cluster
          - Action:
            - eks:DescribeCluster
            - eks:CreateCluster
            Resource: 
            - !Sub arn:${AWS::Partition}:eks:${AWS::Region}:${AWS::AccountId}:cluster/${Namespace}-environment-${AcptEnv}
            Effect: Allow
          - Action:
            - ec2:CreateSecurityGroup
            - ec2:DescribeSecurityGroups
            - ec2:AuthorizeSecurityGroupEgress
            - ec2:RevokeSecurityGroupEgress
            - ec2:CreateTags
            - ec2:DescribeTags
            Resource: '*'
            Effect: Allow
          - Action:
            - ssm:GetParameters
            - ssm:PutParameter
            Resource:
            - !Sub arn:${AWS::Partition}:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${Namespace}-database-${ServiceName}-${AcptEnv}-DatabaseMasterPassword
            Effect: Allow
          - Action:
            - ssm:DescribeParameters
            Resource:
            - '*'
            Effect: Allow
          - Action:
            - rds:ModifyDBInstance
            Resource:
            - !Sub arn:${AWS::Partition}:rds:${AWS::Region}:${AWS::AccountId}:db:*
            Effect: Allow
            Condition:
              StringEquals:
                "rds:db-tag/aws:cloudformation:stack-name": !Sub ${Namespace}-database-${ServiceName}-${AcptEnv}
          - Action:
            - rds:ModifyDBCluster
            Resource:
            - !Sub arn:${AWS::Partition}:rds:${AWS::Region}:${AWS::AccountId}:cluster:*
            Effect: Allow
            Condition:
              StringEquals:
                "rds:cluster-tag/mu:service": !Sub ${ServiceName}
                "rds:cluster-tag/mu:environment": !Sub ${AcptEnv}
          - Action:
            - ec2:DescribeImages
            - ec2:DescribeAvailabilityZones
            - ec2:DescribeInstances
            - ecs:DescribeContainerInstances
            - ecs:ListContainerInstances
            - elasticloadbalancing:DescribeRules
            Resource: '*'
            Effect: Allow
          - Action:
            - iam:PassRole
            Resource: 
            - !Ref AcptCloudFormationRoleArn
            - !Sub arn:${AWS::Partition}:iam::${AWS::AccountId}:role/${Namespace}-environment-${AcptEnv}-eks-service-${AWS::Region}
            Effect: Allow

  MuProdRole:
    Type: AWS::IAM::Role
    Condition: IsProdEnabled
    Properties:
      RoleName: !Sub ${Namespace}-pipeline-${ServiceName}-mu-prod-${AWS::Region}
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            AWS: !GetAtt CodeBuildCDProdRole.Arn
          Action:
          - sts:AssumeRole
      Path: "/"
      Policies:
      - PolicyName: deploy-prod-env
        PolicyDocument:
          Version: '2012-10-17'
          Statement: 
          - Action:
            - ec2:CreateSecurityGroup
            - ec2:AuthorizeSecurityGroupEgress
            - ec2:DescribeSecurityGroups
            - ec2:RevokeSecurityGroupEgress
            - ec2:CreateTags
            - ec2:DescribeTags
            Resource: '*'
            Effect: Allow
          - Action:
            - ssm:GetParameters
            - ssm:PutParameter
            Resource:
            - !Sub arn:${AWS::Partition}:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${Namespace}-database-${ServiceName}-${ProdEnv}-DatabaseMasterPassword
            Effect: Allow
          - Action:
            - ssm:DescribeParameters
            Resource:
            - '*'
            Effect: Allow
          - Action:
            - ec2:DescribeImages
            - ec2:DescribeAvailabilityZones
            - ec2:DescribeInstances
            - ecs:DescribeContainerInstances
            - ecs:ListContainerInstances
            - elasticloadbalancing:DescribeRules
            Resource: '*'
            Effect: Allow
Outputs:
  CodePipelineKeyArn:
    Description: KMS key for CodePipeline
    Value: !GetAtt CodePipelineKey.Arn
  CodePipelineRoleArn:
    Description: Role assummed by CodePipeline
    Value: !GetAtt CodePipelineRole.Arn
  CodeBuildCIRoleArn:
    Description: Role assummed by CodeBuild for building the artifact and managing the image
    Value: !GetAtt CodeBuildCIRole.Arn
  CodeBuildCDAcptRoleArn:
    Description: Role assummed by CodeBuild for deploying to ACPT
    Value:
      Fn::If:
      - IsAcptEnabled
      - !GetAtt CodeBuildCDAcptRole.Arn
      - ''
  CodeBuildCDProdRoleArn:
    Description: Role assummed by CodeBuild for deploying to PROD
    Value:
      Fn::If:
      - IsProdEnabled
      - !GetAtt CodeBuildCDProdRole.Arn
      - ''
  MuAcptRoleArn:
    Description: Role assummed by mu from within the CodeBuild project for ACPT.  Useful for performing cross-account deployment.
    Value:
      Fn::If:
      - IsAcptEnabled
      - !GetAtt MuAcptRole.Arn
      - ''
  MuProdRoleArn:
    Description: Role assummed by mu from within the CodeBuild project for PROD.  Useful for performing cross-account deployment.
    Value:
      Fn::If:
      - IsProdEnabled
      - !GetAtt MuProdRole.Arn
      - ''